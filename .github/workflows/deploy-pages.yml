name: Build and Deploy Pages to GitHub

on:
  workflow_run:
    workflows: ["Generate Galleries"]  # Wait for the "Generate Galleries" workflow to complete
    types:
      - completed

permissions:
  contents: write  # Allow writing to the repository (important for deploying)

jobs:
  build-and-deploy:
    concurrency: ci-${{ github.ref }}  # Prevents deployment overlap

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to ensure you're on the correct branch
      - name: Checkout repository
        uses: actions/checkout@v4

      # Build the page (example for npm-based project)
      - name: Install dependencies and Build the site
        run: |
          npm ci        # Install dependencies (if you're using npm)
          npm run build # Replace with your build command, like `jekyll build` or similar

      # Check if the build was successful and set build status
      - name: Report build status
        id: build_status
        run: |
          if [ $? -eq 0 ]; then
            echo "Build successful"
            echo "build_status=success" >> $GITHUB_ENV
          else
            echo "Build failed"
            echo "build_status=failed" >> $GITHUB_ENV
            exit 1
          fi

      # Deploy to GitHub Pages (main branch)
      - name: Deploy to GitHub Pages
        if: env.build_status == 'success'  # Only deploy if build is successful
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./build  # Specify your build folder (adjust if necessary)
          branch: main     # Deploy to the main branch
          cname: ${{ secrets.CNAME }}  # Add your CNAME file for custom domain

      # Optional: Push CNAME file manually (if required)
      - name: Add CNAME file
        if: env.build_status == 'success'
        run: |
          echo 'yourcustomdomain.com' > ./build/CNAME  # Replace with your custom domain
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add ./build/CNAME
          git commit -m "Add CNAME file for custom domain"
          git push origin main

      # Optionally, add a status check step (e.g., using GitHub's `set-output`)
      - name: Set status output
        run: |
          echo "::set-output name=deployment-status::${{ env.build_status }}"
